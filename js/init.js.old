'use strict';

if (!localStorage.gitHubAccessToken)
	localStorage.gitHubAccessToken = prompt('GitHub personal access token:');

const gh = new GitHub();
gh.__auth.token = localStorage.gitHubAccessToken;

let user = gh.getUser(),
	orgs, repos, repository, scope, milestones, labels, sprints, colaborator;

let userSelect = document.querySelector('select[name="user"]'),
	repoSelect = document.querySelector('select[name="repo"]'),
	scopeSelect = document.querySelector('select[name="scope"]'),
	identifierSelect = document.querySelector('select[name="scope-identifier"]');

document.body.classList.add('loading');

function userChange(event) {
	document.body.classList.add('loading');
	let uid = event.target.selectedOptions[0].value;
	let selectedUser =  _.find([user, ...orgs], u => u.profile.login === uid);
	document.getElementById('user-image').src = selectedUser.profile.avatar_url;
	(selectedUser.listRepos || selectedUser.getRepos).call(selectedUser)
		.then(({data:repositories}) => {
			repos = _.filter(repositories, repo => selectedUser.profile.login === repo.owner.login);
			repos = _.map(repos, repo => {
				let r = gh.getRepo(selectedUser.profile.login, repo.name);
				r.name = repo.name;
				return r;
			});
			while (repoSelect.firstChild) repoSelect.removeChild(repoSelect.firstChild);
			_.each(repos, repo => {
				repo.issues = gh.getIssues(selectedUser.profile.login, repo.name);
				let option = document.createElement('option');
				option.value = repo.name;
				option.innerText = repo.name;
				repoSelect.appendChild(option);
			});
			Stretchy.resize(repoSelect);
			repoChange({target: repoSelect});
		})
		.catch(console.error.bind(console));
}
userSelect.addEventListener('change', userChange);

function repoChange(event) {
	document.body.classList.add('loading');
	let repoName = event.target.selectedOptions[0].value;
	repository = _.findWhere(repos, {name: repoName});
	scopeChange({target: scopeSelect});
}
repoSelect.addEventListener('change', repoChange);

function scopeChange(event) {
	document.body.classList.add('loading');
	scope = event.target.selectedOptions[0].value;
	switch (scope) {
	case 'milestone':
		repository.issues.listMilestones()
			.then(({data: milestones}) => {
				while (identifierSelect.firstChild) identifierSelect.removeChild(identifierSelect.firstChild);
				_.each(milestones, m => {
					let option = document.createElement('option');
					option.value = m.title;
					option.innerText = m.title;
					identifierSelect.appendChild(option);
				});
				Stretchy.resize(identifierSelect);
				document.body.classList.remove('loading');
			})
		break;
	case 'sprint':
		repository.issues.
	default:
		console.error('Unknown scope.');
		break;
	}
}
scopeSelect.addEventListener('change', scopeChange);

user.listOrgs()
	.then(({data: organisations}) => {
		orgs = _.map(organisations, org => gh.getOrganization(org.login));
		return Promise.all([user.getProfile(), ..._.map(orgs, org => gh.getUser(org.__name).getProfile())]);
	})
	.then(([{data: userProfile}, ...orgProfiles]) => {
		user.profile = userProfile;
		_.each(orgProfiles, profile => _.findWhere(orgs, {__name: profile.data.login}).profile = profile.data);
		while (userSelect.firstChild) userSelect.removeChild(userSelect.firstChild);
		_.each([user, ...orgs], u => {
			let option = document.createElement('option');
			option.value = u.profile.login;
			option.innerText = '@' + u.profile.login;
			userSelect.appendChild(option);
		});
		Stretchy.resize(userSelect);
		userChange({target: userSelect});
		return;
	})
	.catch(console.error.bind(console));